import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import smbus2
import time

from datetime import datetime

class OLEDDisplayNode(Node):
    def __init__(self):
        super().__init__('oled_display_node')

        # OLED Config
        self.config = {
            'OLED_ADDRESS': 0x3C,
            'I2C_BUS': 1
        }

        # I2C Bus
        self.bus = smbus2.SMBus(self.config['I2C_BUS'])

        # Init OLED
        self.init_oled()
        self.clear_display()

        # Subscriber
        self.subscription = self.create_subscription(
            String,
            '/oled_text',
            self.listener_callback,
            10
        )

        self.get_logger().info("OLED Display Node initialized")

    def oled_command(self, cmd):
        self.bus.write_byte_data(self.config['OLED_ADDRESS'], 0x00, cmd)

    def oled_data(self, data):
        self.bus.write_byte_data(self.config['OLED_ADDRESS'], 0x40, data)

    def init_oled(self):
        cmds = [
            0xAE, 0xD5, 0x80, 0xA8, 0x1F,
            0xD3, 0x00, 0x40, 0x8D, 0x14,
            0x20, 0x00, 0xA1, 0xC8, 0xDA,
            0x02, 0x81, 0xCF, 0xD9, 0xF1,
            0xDB, 0x30, 0xA4, 0xA6, 0xAF
        ]
        for cmd in cmds:
            self.oled_command(cmd)

    def clear_display(self):
        for page in range(4):  # 128x32 display has 4 pages
            self.oled_command(0xB0 + page)
            self.oled_command(0x00)
            self.oled_command(0x10)
            for _ in range(128):
                self.oled_data(0x00)

    def display_text(self, text, row):
        self.oled_command(0xB0 + row)
        self.oled_command(0x00)
        self.oled_command(0x10)

        for char in text:
            if char in font:
                for col in font[char]:
                    self.oled_data(col)
            else:
                for _ in range(5):
                    self.oled_data(0x00)
            self.oled_data(0x00)  # spacing

    def listener_callback(self, msg):
        self.get_logger().info(f"Displaying: {msg.data}")
        self.clear_display()
        lines = msg.data.split('\n')
        for i, line in enumerate(lines[:4]):
            self.display_text(line, i)


# Basic 5x8 font map
font = {
    '0': [0x3E, 0x51, 0x49, 0x45, 0x3E],
    '1': [0x00, 0x42, 0x7F, 0x40, 0x00],
    '2': [0x42, 0x61, 0x51, 0x49, 0x46],
    '3': [0x21, 0x41, 0x45, 0x4B, 0x31],
    '4': [0x18, 0x14, 0x12, 0x7F, 0x10],
    '5': [0x27, 0x45, 0x45, 0x45, 0x39],
    '6': [0x3C, 0x4A, 0x49, 0x49, 0x30],
    '7': [0x01, 0x71, 0x09, 0x05, 0x03],
    '8': [0x36, 0x49, 0x49, 0x49, 0x36],
    '9': [0x06, 0x49, 0x49, 0x29, 0x1E],
    '.': [0x00, 0x60, 0x60, 0x00, 0x00],
    ':': [0x00, 0x36, 0x36, 0x00, 0x00],
    ' ': [0x00, 0x00, 0x00, 0x00, 0x00],
    'A': [0x7E, 0x11, 0x11, 0x11, 0x7E],
    'B': [0x7F, 0x49, 0x49, 0x49, 0x36],
    'C': [0x3E, 0x41, 0x41, 0x41, 0x22],
    'D': [0x7F, 0x41, 0x41, 0x22, 0x1C],
    'E': [0x7F, 0x49, 0x49, 0x49, 0x41],
    'F': [0x7F, 0x09, 0x09, 0x09, 0x01],
    'G': [0x3E, 0x41, 0x49, 0x49, 0x7A],
    'H': [0x7F, 0x08, 0x08, 0x08, 0x7F],
    'I': [0x00, 0x41, 0x7F, 0x41, 0x00],
    'J': [0x20, 0x40, 0x41, 0x3F, 0x01],
    'K': [0x7F, 0x08, 0x14, 0x22, 0x41],
    'L': [0x7F, 0x40, 0x40, 0x40, 0x40],
    'M': [0x7F, 0x02, 0x0C, 0x02, 0x7F],
    'N': [0x7F, 0x04, 0x08, 0x10, 0x7F],
    'O': [0x3E, 0x41, 0x41, 0x41, 0x3E],
    'P': [0x7F, 0x09, 0x09, 0x09, 0x06],
    'Q': [0x3E, 0x41, 0x51, 0x21, 0x5E],
    'R': [0x7F, 0x09, 0x19, 0x29, 0x46],
    'S': [0x46, 0x49, 0x49, 0x49, 0x31],
    'T': [0x01, 0x01, 0x7F, 0x01, 0x01],
    'U': [0x3F, 0x40, 0x40, 0x40, 0x3F],
    'V': [0x1F, 0x20, 0x40, 0x20, 0x1F],
    'W': [0x3F, 0x40, 0x38, 0x40, 0x3F],
    'X': [0x63, 0x14, 0x08, 0x14, 0x63],
    'Y': [0x07, 0x08, 0x70, 0x08, 0x07],
    'Z': [0x61, 0x51, 0x49, 0x45, 0x43],
    'a': [0x20, 0x54, 0x54, 0x54, 0x78],
    'b': [0x7F, 0x48, 0x44, 0x44, 0x38],
    'c': [0x38, 0x44, 0x44, 0x44, 0x20],
    'd': [0x38, 0x44, 0x44, 0x48, 0x7F],
    'e': [0x38, 0x54, 0x54, 0x54, 0x18],
    'f': [0x08, 0x7E, 0x09, 0x01, 0x02],
    'g': [0x0C, 0x52, 0x52, 0x52, 0x3E],
    'h': [0x7F, 0x08, 0x04, 0x04, 0x78],
    'i': [0x00, 0x44, 0x7D, 0x40, 0x00],
    'j': [0x20, 0x40, 0x44, 0x3D, 0x00],
    'k': [0x7F, 0x10, 0x28, 0x44, 0x00],
    'l': [0x00, 0x41, 0x7F, 0x40, 0x00],
    'm': [0x7C, 0x04, 0x18, 0x04, 0x78],
    'n': [0x7C, 0x08, 0x04, 0x04, 0x78],
    'o': [0x38, 0x44, 0x44, 0x44, 0x38],
    'p': [0x7C, 0x14, 0x14, 0x14, 0x08],
    'q': [0x08, 0x14, 0x14, 0x18, 0x7C],
    'r': [0x7C, 0x08, 0x04, 0x04, 0x08],
    's': [0x48, 0x54, 0x54, 0x54, 0x20],
    't': [0x04, 0x3F, 0x44, 0x40, 0x20],
    'u': [0x3C, 0x40, 0x40, 0x20, 0x7C],
    'v': [0x1C, 0x20, 0x40, 0x20, 0x1C],
    'w': [0x3C, 0x40, 0x30, 0x40, 0x3C],
    'x': [0x44, 0x28, 0x10, 0x28, 0x44],
    'y': [0x0C, 0x50, 0x50, 0x50, 0x3C],
    'z': [0x44, 0x64, 0x54, 0x4C, 0x44]
}

def main(args=None):
    rclpy.init(args=args)
    node = OLEDDisplayNode()
    try:
        #rclpy.spin(node)
        while rclpy.ok():
            rclpy.spin_once(node, timeout_sec=1.0)  # 1000ms wait
    except KeyboardInterrupt:
        node.get_logger().info("Shutting down OLED node.")
    finally:
        node.clear_display()
        node.destroy_node()
        rclpy.shutdown()

# ros2 run oled_display oled_display_node
# ros2 topic pub /oled_text std_msgs/String "data: 'Hello\nWorld!'"
